# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class CycleTestInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cycle_status: bool=None, timestamp: str=None):  # noqa: E501
        """CycleTestInfo - a model defined in Swagger

        :param cycle_status: The cycle_status of this CycleTestInfo.  # noqa: E501
        :type cycle_status: bool
        :param timestamp: The timestamp of this CycleTestInfo.  # noqa: E501
        :type timestamp: str
        """
        self.swagger_types = {
            'cycle_status': bool,
            'timestamp': str
        }

        self.attribute_map = {
            'cycle_status': 'cycle_status',
            'timestamp': 'timestamp'
        }
        self._cycle_status = cycle_status
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'CycleTestInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cycleTestInfo of this CycleTestInfo.  # noqa: E501
        :rtype: CycleTestInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle_status(self) -> bool:
        """Gets the cycle_status of this CycleTestInfo.


        :return: The cycle_status of this CycleTestInfo.
        :rtype: bool
        """
        return self._cycle_status

    @cycle_status.setter
    def cycle_status(self, cycle_status: bool):
        """Sets the cycle_status of this CycleTestInfo.


        :param cycle_status: The cycle_status of this CycleTestInfo.
        :type cycle_status: bool
        """
        if cycle_status is None:
            raise ValueError("Invalid value for `cycle_status`, must not be `None`")  # noqa: E501

        self._cycle_status = cycle_status

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this CycleTestInfo.


        :return: The timestamp of this CycleTestInfo.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this CycleTestInfo.


        :param timestamp: The timestamp of this CycleTestInfo.
        :type timestamp: str
        """

        self._timestamp = timestamp
