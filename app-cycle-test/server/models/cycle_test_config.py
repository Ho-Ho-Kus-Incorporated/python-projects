# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class CycleTestConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, open_activate_time: float=None, open_retract_time: float=None, close_activate_time: float=None, close_retract_time: float=None):  # noqa: E501
        """CycleTestConfig - a model defined in Swagger

        :param open_activate_time: The open_activate_time of this CycleTestConfig.  # noqa: E501
        :type open_activate_time: float
        :param open_retract_time: The open_retract_time of this CycleTestConfig.  # noqa: E501
        :type open_retract_time: float
        :param close_activate_time: The close_activate_time of this CycleTestConfig.  # noqa: E501
        :type close_activate_time: float
        :param close_retract_time: The close_retract_time of this CycleTestConfig.  # noqa: E501
        :type close_retract_time: float
        """
        self.swagger_types = {
            'open_activate_time': float,
            'open_retract_time': float,
            'close_activate_time': float,
            'close_retract_time': float
        }

        self.attribute_map = {
            'open_activate_time': 'open_activate_time',
            'open_retract_time': 'open_retract_time',
            'close_activate_time': 'close_activate_time',
            'close_retract_time': 'close_retract_time'
        }
        self._open_activate_time = open_activate_time
        self._open_retract_time = open_retract_time
        self._close_activate_time = close_activate_time
        self._close_retract_time = close_retract_time

    @classmethod
    def from_dict(cls, dikt) -> 'CycleTestConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cycleTestConfig of this CycleTestConfig.  # noqa: E501
        :rtype: CycleTestConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def open_activate_time(self) -> float:
        """Gets the open_activate_time of this CycleTestConfig.


        :return: The open_activate_time of this CycleTestConfig.
        :rtype: float
        """
        return self._open_activate_time

    @open_activate_time.setter
    def open_activate_time(self, open_activate_time: float):
        """Sets the open_activate_time of this CycleTestConfig.


        :param open_activate_time: The open_activate_time of this CycleTestConfig.
        :type open_activate_time: float
        """
        if open_activate_time is None:
            raise ValueError("Invalid value for `open_activate_time`, must not be `None`")  # noqa: E501

        self._open_activate_time = open_activate_time

    @property
    def open_retract_time(self) -> float:
        """Gets the open_retract_time of this CycleTestConfig.


        :return: The open_retract_time of this CycleTestConfig.
        :rtype: float
        """
        return self._open_retract_time

    @open_retract_time.setter
    def open_retract_time(self, open_retract_time: float):
        """Sets the open_retract_time of this CycleTestConfig.


        :param open_retract_time: The open_retract_time of this CycleTestConfig.
        :type open_retract_time: float
        """
        if open_retract_time is None:
            raise ValueError("Invalid value for `open_retract_time`, must not be `None`")  # noqa: E501

        self._open_retract_time = open_retract_time

    @property
    def close_activate_time(self) -> float:
        """Gets the close_activate_time of this CycleTestConfig.


        :return: The close_activate_time of this CycleTestConfig.
        :rtype: float
        """
        return self._close_activate_time

    @close_activate_time.setter
    def close_activate_time(self, close_activate_time: float):
        """Sets the close_activate_time of this CycleTestConfig.


        :param close_activate_time: The close_activate_time of this CycleTestConfig.
        :type close_activate_time: float
        """
        if close_activate_time is None:
            raise ValueError("Invalid value for `close_activate_time`, must not be `None`")  # noqa: E501

        self._close_activate_time = close_activate_time

    @property
    def close_retract_time(self) -> float:
        """Gets the close_retract_time of this CycleTestConfig.


        :return: The close_retract_time of this CycleTestConfig.
        :rtype: float
        """
        return self._close_retract_time

    @close_retract_time.setter
    def close_retract_time(self, close_retract_time: float):
        """Sets the close_retract_time of this CycleTestConfig.


        :param close_retract_time: The close_retract_time of this CycleTestConfig.
        :type close_retract_time: float
        """
        if close_retract_time is None:
            raise ValueError("Invalid value for `close_retract_time`, must not be `None`")  # noqa: E501

        self._close_retract_time = close_retract_time
